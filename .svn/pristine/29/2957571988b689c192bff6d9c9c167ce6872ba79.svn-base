<!--
 * @Author: xuranXYS
 * @LastEditTime: 2024-06-26 16:28:56
 * @GitHub: www.github.com/xiaoxustudio
 * @WebSite: www.xiaoxustudio.top
 * @Description: By xuranXYS
-->
<template>
    <el-scrollbar class="w-full" height="95vh">
        <el-skeleton :rows="5" :loading="is_ready" animated>
            <template #default>
                <div class="w-full bg-white rounded-sm p-2 text-end">
                    <el-switch
                        v-model="real_show_password"
                        class="mb-2"
                        active-text="显示密码"
                        inactive-text="隐式密码"
                    />
                </div>
                <el-table empty-text="暂无用户" :data="list" style="width: 100%; height: 100%">
                    <el-table-column prop="id" label="id" />
                    <el-table-column prop="user_id" label="用户ID" />
                    <el-table-column prop="nickname" label="用户昵称" />
                    <el-table-column prop="username" label="用户名" />
                    <el-table-column prop="password" label="用户密码">
                        <template #default="scope">
                            <el-tooltip
                                v-if="!real_show_password"
                                effect="dark"
                                :content="scope.row.password"
                                placement="top"
                            >
                                <template #default>
                                    <span class="w-full select-none">{{
                                        '*'.repeat(scope.row.password.length)
                                    }}</span>
                                </template>
                            </el-tooltip>
                            <span v-if="real_show_password" class="w-full select-none">{{
                                scope.row.password
                            }}</span>
                        </template>
                    </el-table-column>
                    <el-table-column prop="login_time" label="用户最后登录时间" />
                    <el-table-column label="用户组">
                        <template #default="scope">
                            <el-tag :type="scope.row.group == '0' ? 'primary' : 'info'">{{
                                groupComputed(scope.row)
                            }}</el-tag>
                        </template>
                    </el-table-column>
                    <el-table-column label="操作" width="180">
                        <template #default="scope">
                            <el-button size="small" @click="handleEdit(scope.row)">编辑</el-button>
                            <el-button size="small" type="danger" @click="handleDelete(scope.row)"
                                >删除</el-button
                            >
                        </template>
                    </el-table-column>
                </el-table>
            </template>
        </el-skeleton>
    </el-scrollbar>
    <!-- 编辑对话框 -->
    <el-dialog v-model="dialogFormVisible" :title="`编辑用户 ${Dialog_form.user_id}`" width="500">
        <el-form :model="Dialog_form">
            <el-form-item label="昵称">
                <el-input v-model="Dialog_form.nickname" autocomplete="off" />
            </el-form-item>
            <el-form-item label="用户名">
                <el-input v-model="Dialog_form.username" autocomplete="off" />
            </el-form-item>
            <el-form-item label="密码">
                <el-input v-model="Dialog_form.password" autocomplete="off" />
            </el-form-item>
            <el-form-item label="最后登录时间">
                <el-date-picker v-model="Dialog_form.login_time" type="datetime" />
            </el-form-item>
            <el-form-item label="是否管理员">
                <el-switch
                    v-model="Dialog_form.group"
                    inline-prompt
                    active-text="是"
                    active-value="0"
                    inactive-value="1"
                    inactive-text="否"
                />
            </el-form-item>
        </el-form>
        <template #footer>
            <div class="dialog-footer">
                <el-button @click="dialogFormVisible = false">取消</el-button>
                <el-button type="primary" @click="handleSave"> 保存 </el-button>
            </div>
        </template>
    </el-dialog>
</template>
<script setup lang="ts">
import { useInfoStore } from '@/store';
import { API_Type, postData, UserData } from '@/utils';
const useInfo = useInfoStore();
const list = ref<UserData[]>([]);
const Dialog_form = ref<UserData>({
    id: '',
    user_id: '',
    nickname: '',
    username: '',
    password: '',
    login_time: '',
    group: '',
    token: '',
});
const groupComputed = computed(() => (_g: any) => (_g.group == '0' ? '管理员' : '普通用户'));
const is_ready = ref(true);
const dialogFormVisible = ref(false);
const real_show_password = ref(false);

const handleEdit = (row: UserData) => {
    Dialog_form.value = { ...row };
    dialogFormVisible.value = true;
};
const handleSave = () => {
    postData(`?type=${API_Type.admin_updatesUser}`, {
        username: useInfo.username,
        token: useInfo.token,
        data: JSON.stringify(Dialog_form.value),
    }).then((data) => {
        const _data = data.data;
        if (_data.status) {
            ElMessage.success({
                message: `保存成功`,
            });
            updateUserList();
        } else {
            ElMessage.error({
                message: _data.msg,
            });
        }
    });
    dialogFormVisible.value = false;
};
const handleDelete = (row: UserData) => {
    postData(`?type=${API_Type.admin_deleteUser}`, {
        username: useInfo.username,
        token: useInfo.token,
        id: row.user_id,
    }).then((data) => {
        const _data = data.data;
        if (_data.status) {
            ElMessage.success({
                message: `删除用户 ${row.user_id} 成功`,
            });
            updateUserList();
        } else {
            ElMessage.error({
                message: _data.msg,
            });
        }
    });
};

const updateUserList = () => {
    postData(`?type=${API_Type.admin_getUserList}`, {
        username: useInfo.username,
        token: useInfo.token,
    }).then((data) => {
        const _data = data.data;
        if (_data.status) {
            const _list = _data.data as UserData[];
            list.value = Array.isArray(_list) ? _list : [];
            is_ready.value = false;
        } else {
            ElMessage.error({
                message: _data.msg,
            });
        }
    });
};

onMounted(() => {
    is_ready.value = true;
    updateUserList();
});
</script>
<style scope lang="scss"></style>
