/*
 * @Author: xuranXYS
 * @LastEditTime: 2024-06-20 13:31:20
 * @GitHub: www.github.com/xiaoxustudio
 * @WebSite: www.xiaoxustudio.top
 * @Description: By xuranXYS
 */
// 工具函数库

import axios, { AxiosResponse } from 'axios';

const base_url = 'http://blog.xuran/api.php';
axios.defaults.data = 'application/json';

/**
 * @description: 随机颜色
 * @return {*}
 */
export function getRandomColor(): string {
    let letters = '0123456789ABCDEF';
    let color = '#';
    for (let i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
}
/**
 * @description: 随机暖色色系
 * @return {*}
 */
export function getRandomWarmColor(): string {
    let letters = '0123456789ABCDEF';
    let color = '#';
    // 确保红色值较高，以产生暖色调
    color += letters[Math.floor(Math.random() * 4) + 8]; // 8, 9, A, B
    // 绿色值较低，但不要过低，以保持颜色亮度
    color += letters[Math.floor(Math.random() * 4)]; // 0, 1, 2, 3
    // 黄色值较高，以增加暖色调
    color += letters[Math.floor(Math.random() * 4) + 8]; // 8, 9, A, B

    return color;
}
/**
 * @description: 随机冷色色系
 * @return {*}
 */
export function getRandomCoolColor(): string {
    let letters = '0123456789ABCDEF';
    let color = '#';
    // 确保蓝色值较高，以产生冷色调
    color += letters[Math.floor(Math.random() * 4) + 8]; // 8, 9, A, B
    // 绿色值适中，以保持颜色亮度
    color += letters[Math.floor(Math.random() * 8)]; // 0, 1, 2, 3, 4, 5, 6, 7
    // 红色值较低，以增加冷色调
    color += letters[Math.floor(Math.random() * 4)]; // 0, 1, 2, 3

    return color;
}
/**
 * @description: 随机数
 * @param {number} min
 * @param {number} max
 * @return {*}
 */
export function randomNum(min: number, max: number): number {
    return Math.floor(Math.random() * (max - min) + min);
}
/**
 * @description: 随机RGBA颜色
 * @param {number} minColor
 * @param {number} maxColor
 * @param {*} op
 * @return {*}
 */
export function randomRGBColor(minColor: number, maxColor: number, op = 1): string {
    return `rgba(${randomNum(minColor, maxColor)},${randomNum(minColor, maxColor)},${randomNum(minColor, maxColor)}, ${op})`;
}

// 网络请求
interface APIType {
    login: string;
    register: string;
}
export const API_Type: APIType = {
    login: 'loginUser',
    register: 'addUser',
};
export interface RespData {
    /**
     * @description: 错误消息
     */
    msg: string;
    /**
     * @description: 状态码：0失败，1成功
     */
    status: number;
    /**
     * @description: 数据
     */
    data: { [key: string]: any };
}
/**
 * @description: get请求
 * @param {string} prefix 前缀
 * @param {object} data 数据
 * @return {*}
 */
export function getData(
    prefix: string,
    data: { [key: string]: any },
): Promise<AxiosResponse<RespData>> {
    return axios.get(base_url + prefix, {
        params: data,
    });
}
/**
 * @description: post请求
 * @param {string} prefix 前缀
 * @param {object} data 数据
 * @return {*}
 */
export function postData(
    prefix: string,
    data: { [key: string]: any },
): Promise<AxiosResponse<RespData>> {
    let _fd = new FormData();
    for (let i in data) {
        _fd.append(i, data[i]);
    }
    return axios.post(base_url + prefix, _fd);
}
